from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import json
import os

# Bot configuration
TOKEN = os.getenv("BOT_TOKEN", "8109322082:AAFBpC7pIJRiLogy_4pvZ8Gd6zQ4W6O74s4")
SUB_CHANNEL = "@Nonobodynonono"

# File paths
DATA_DIR = "data"
PARTIES_FILE = os.path.join(DATA_DIR, "parties.json")
PLAYERS_FILE = os.path.join(DATA_DIR, "players.json")
AUTHORIZED_PLAYERS_FILE = os.path.join(DATA_DIR, "authorized_players.json")

# ========== Helper Functions ==========

def load_json(path):
    """Load JSON data from file, return empty list if file doesn't exist"""
    if not os.path.exists(path):
        return []
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except (json.JSONDecodeError, IOError):
        return []

def save_json(path, data):
    """Save data to JSON file"""
    try:
        os.makedirs(os.path.dirname(path), exist_ok=True)
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
    except IOError as e:
        print(f"Error saving JSON file {path}: {e}")

def get_player(user_id):
    """Get player data by user ID"""
    players = load_json(PLAYERS_FILE)
    for p in players:
        if p['id'] == user_id:
            return p
    return None

def create_player(user):
    """Create a new player if they don't exist"""
    players = load_json(PLAYERS_FILE)
    if get_player(user.id):
        return  # Player already exists
    
    new_player = {
        "id": user.id,
        "username": user.username or "",
        "first_name": user.first_name or "",
        "coins": 1000,
        "party_id": None,
        "location": "ÿ™Ÿáÿ±ÿßŸÜ",
        "investments": [],
        "soldiers": 0,
        "is_alive": True
    }
    players.append(new_player)
    save_json(PLAYERS_FILE, players)

def get_party_by_id(pid):
    """Get party data by party ID"""
    parties = load_json(PARTIES_FILE)
    for p in parties:
        if p["id"] == pid:
            return p
    return None

def update_player(user_id, updates):
    """Update player data"""
    players = load_json(PLAYERS_FILE)
    for i, p in enumerate(players):
        if p['id'] == user_id:
            players[i].update(updates)
            break
    save_json(PLAYERS_FILE, players)

def is_player_authorized(user_id):
    """Check if player is authorized to play"""
    authorized_players = load_json(AUTHORIZED_PLAYERS_FILE)
    return user_id in authorized_players

def add_authorized_player(user_id):
    """Add a player to authorized list"""
    authorized_players = load_json(AUTHORIZED_PLAYERS_FILE)
    if user_id not in authorized_players:
        authorized_players.append(user_id)
        save_json(AUTHORIZED_PLAYERS_FILE, authorized_players)
        return True
    return False

def remove_authorized_player(user_id):
    """Remove a player from authorized list"""
    authorized_players = load_json(AUTHORIZED_PLAYERS_FILE)
    if user_id in authorized_players:
        authorized_players.remove(user_id)
        save_json(AUTHORIZED_PLAYERS_FILE, authorized_players)
        return True
    return False

def purchase_item(user_id, item_type, item_name, cost):
    """Purchase an item for a player"""
    player = get_player(user_id)
    if not player:
        return False, "ÿ®ÿßÿ≤€å⁄©ŸÜ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ"
    
    if player.get('coins', 0) < cost:
        return False, f"ÿ≥⁄©Ÿá ⁄©ÿßŸÅ€å ŸÜÿØÿßÿ±€åÿØ. ŸÜ€åÿßÿ≤: {cost:,} ÿ≥⁄©Ÿá"
    
    # Deduct coins
    new_coins = player['coins'] - cost
    
    if item_type == "soldier":
        new_soldiers = player.get('soldiers', 0) + 1
        update_player(user_id, {'coins': new_coins, 'soldiers': new_soldiers})
    elif item_type == "company":
        investments = player.get('investments', [])
        investments.append({"name": item_name, "type": "company", "daily_income": get_company_income(item_name)})
        update_player(user_id, {'coins': new_coins, 'investments': investments})
    
    return True, f"ÿÆÿ±€åÿØ ŸÖŸàŸÅŸÇ! {item_name} ÿÆÿ±€åÿØÿßÿ±€å ÿ¥ÿØ."

def get_company_income(company_name):
    """Get daily income for different company types"""
    income_map = {
        "⁄©ÿßÿ±ÿÆÿßŸÜŸá ⁄©Ÿà⁄Ü⁄©": 50,
        "⁄©ÿßÿ±ÿÆÿßŸÜŸá ÿ®ÿ≤ÿ±⁄Ø": 200,
        "ÿ¥ÿ±⁄©ÿ™ ŸÜŸÅÿ™€å": 500,
        "ÿ®ÿßŸÜ⁄©": 800
    }
    return income_map.get(company_name, 0)

def get_party_leader(party_id):
    """Get the richest player in a party (party leader)"""
    players = load_json(PLAYERS_FILE)
    party_members = [p for p in players if p.get('party_id') == party_id]
    
    if not party_members:
        return None
    
    # Find the member with most coins
    leader = max(party_members, key=lambda x: x.get('coins', 0))
    return leader

def get_party_total_soldiers(party_id):
    """Get total soldiers for all members of a party"""
    players = load_json(PLAYERS_FILE)
    party_members = [p for p in players if p.get('party_id') == party_id]
    
    total_soldiers = sum(member.get('soldiers', 0) for member in party_members)
    return total_soldiers

def leave_party(user_id):
    """Remove player from their current party"""
    player = get_player(user_id)
    if not player or not player.get('party_id'):
        return False, "ÿ¥ŸÖÿß ÿπÿ∂Ÿà Ÿá€å⁄Ü ÿ≠ÿ≤ÿ®€å ŸÜ€åÿ≥ÿ™€åÿØ."
    
    party_id = player['party_id']
    
    # Remove player from their party
    update_player(user_id, {'party_id': None})
    
    # Update party members list
    parties = load_json(PARTIES_FILE)
    for party in parties:
        if party['id'] == party_id:
            if user_id in party.get('members', []):
                party['members'].remove(user_id)
                save_json(PARTIES_FILE, parties)
            break
    
    return True, "ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿßÿ≤ ÿ≠ÿ≤ÿ® ÿÆÿßÿ±ÿ¨ ÿ¥ÿØ€åÿØ."

# ========== Command Handlers ==========

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command"""
    user = update.effective_user
    user_id = user.id
    
    # Log user information for admin reference
    print(f"üîç User trying to start: ID={user_id}, Username=@{user.username or 'None'}, Name={user.first_name}")
    
    # Check if player is authorized
    if not is_player_authorized(user_id):
        access_denied_message = f"""
‚ùå ÿ¥ŸÖÿß ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿ®Ÿá ÿ®ÿßÿ≤€å ŸÜÿØÿßÿ±€åÿØ

ÿ®ÿ±ÿß€å ÿÆÿ±€åÿØ ÿßÿ¥ÿ™ÿ±ÿß⁄© ÿ®Ÿá ÿ¢€åÿØ€å @Nonobodynonono Ÿæ€åÿßŸÖ ÿ®ÿØ€åÿØ

üîê Ÿæÿ≥ ÿßÿ≤ ÿÆÿ±€åÿØ ÿßÿ¥ÿ™ÿ±ÿß⁄©ÿå ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿ¥ŸÖÿß ŸÅÿπÿßŸÑ ÿÆŸàÿßŸáÿØ ÿ¥ÿØ.

üìã ÿ¥ŸÜÿßÿ≥Ÿá ÿ¥ŸÖÿß: {user_id}
        """
        await update.message.reply_text(access_denied_message.strip())
        return
    
    create_player(user)
    
    welcome_message = f"""
üéÆ ÿ≥ŸÑÿßŸÖ {user.first_name}!

ÿ®Ÿá ÿ®ÿßÿ≤€å ÿßÿ≥ÿ™ÿ±ÿßÿ™⁄ò€å ÿ≥€åÿßÿ≥€å ÿÆŸàÿ¥ ÿ¢ŸÖÿØ€åÿØ!

üìä Ÿàÿ∂ÿπ€åÿ™ ÿ¥ŸÖÿß:
üí∞ ÿ≥⁄©Ÿá: 1000
üìç ŸÖŸàŸÇÿπ€åÿ™: ÿ™Ÿáÿ±ÿßŸÜ
üèõÔ∏è ÿ≠ÿ≤ÿ®: Ÿá€å⁄Ü

üéØ ŸáÿØŸÅ ÿ®ÿßÿ≤€å: ŸÇÿØÿ±ÿ™ ÿ≥€åÿßÿ≥€å ⁄©ÿ≥ÿ® ⁄©ŸÜ€åÿØ Ÿà ⁄©ÿ¥Ÿàÿ± ÿ±ÿß ÿßÿØÿßÿ±Ÿá ⁄©ŸÜ€åÿØ!
    """
    
    # Create main menu glass-style buttons
    keyboard = [
        [
            InlineKeyboardButton("üèõÔ∏è Ÿæ€åŸàÿ≥ÿ™ŸÜ ÿ®Ÿá ÿ≠ÿ≤ÿ®", callback_data="show_parties"),
            InlineKeyboardButton("üë§ Ÿæÿ±ŸàŸÅÿß€åŸÑ ŸÖŸÜ", callback_data="show_profile")
        ],
        [
            InlineKeyboardButton("üõí ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá", callback_data="show_shop"),
            InlineKeyboardButton("üìç ÿ™ÿ∫€å€åÿ± ŸÖŸàŸÇÿπ€åÿ™", callback_data="change_location")
        ],
        [
            InlineKeyboardButton("üèõÔ∏è ÿ≠ÿ≤ÿ® ŸÖŸÜ", callback_data="my_party"),
            InlineKeyboardButton("üìä ÿßÿ≠ÿ≤ÿßÿ® ÿ≥€åÿßÿ≥€å", callback_data="show_all_parties")
        ],
        [
            InlineKeyboardButton("üÜò ÿ±ÿßŸáŸÜŸÖÿß", callback_data="show_help")
        ]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_message.strip(), reply_markup=markup)

async def join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /join command - show party selection"""
    user_id = update.effective_user.id
    
    # Check if player is authorized
    if not is_player_authorized(user_id):
        access_denied_message = """
‚ùå ÿ¥ŸÖÿß ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿ®Ÿá ÿ®ÿßÿ≤€å ŸÜÿØÿßÿ±€åÿØ

ÿ®ÿ±ÿß€å ÿÆÿ±€åÿØ ÿßÿ¥ÿ™ÿ±ÿß⁄© ÿ®Ÿá ÿ¢€åÿØ€å @Nonobodynonono Ÿæ€åÿßŸÖ ÿ®ÿØ€åÿØ
        """
        await update.message.reply_text(access_denied_message.strip())
        return
    
    player = get_player(user_id)
    
    if not player:
        await update.message.reply_text("‚ö†Ô∏è ÿßÿ®ÿ™ÿØÿß ÿ®ÿß ÿØÿ≥ÿ™Ÿàÿ± /start ÿØÿ± ÿ®ÿßÿ≤€å ÿ´ÿ®ÿ™‚ÄåŸÜÿßŸÖ ⁄©ŸÜ€åÿØ.")
        return
    
    if player.get('party_id'):
        party = get_party_by_id(player['party_id'])
        party_name = party['name'] if party else "ŸÜÿßŸÖÿ¥ÿÆÿµ"
        await update.message.reply_text(f"üèõÔ∏è ÿ¥ŸÖÿß ŸÇÿ®ŸÑÿßŸã ÿπÿ∂Ÿà {party_name} Ÿáÿ≥ÿ™€åÿØ!")
        return
    
    parties = load_json(PARTIES_FILE)
    if not parties:
        await update.message.reply_text("‚ùå Ÿá€å⁄Ü ÿ≠ÿ≤ÿ®€å ÿØÿ± ÿØÿ≥ÿ™ÿ±ÿ≥ ŸÜ€åÿ≥ÿ™.")
        return
    
    # Create inline keyboard with parties
    keyboard = []
    for party in parties:
        member_count = len(party.get('members', []))
        button_text = f"{party['name']} ({party['region']}) - {member_count} ÿπÿ∂Ÿà"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"join_{party['id']}")])
    
    markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üèõÔ∏è €å⁄©€å ÿßÿ≤ ÿßÿ≠ÿ≤ÿßÿ® ÿ≤€åÿ± ÿ±ÿß ÿ®ÿ±ÿß€å Ÿæ€åŸàÿ≥ÿ™ŸÜ ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:",
        reply_markup=markup
    )

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show player profile"""
    user_id = update.effective_user.id
    
    # Check if player is authorized
    if not is_player_authorized(user_id):
        access_denied_message = """
‚ùå ÿ¥ŸÖÿß ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿ®Ÿá ÿ®ÿßÿ≤€å ŸÜÿØÿßÿ±€åÿØ

ÿ®ÿ±ÿß€å ÿÆÿ±€åÿØ ÿßÿ¥ÿ™ÿ±ÿß⁄© ÿ®Ÿá ÿ¢€åÿØ€å @Nonobodynonono Ÿæ€åÿßŸÖ ÿ®ÿØ€åÿØ
        """
        await update.message.reply_text(access_denied_message.strip())
        return
    
    player = get_player(user_id)
    
    if not player:
        await update.message.reply_text("‚ö†Ô∏è ÿßÿ®ÿ™ÿØÿß ÿ®ÿß ÿØÿ≥ÿ™Ÿàÿ± /start ÿØÿ± ÿ®ÿßÿ≤€å ÿ´ÿ®ÿ™‚ÄåŸÜÿßŸÖ ⁄©ŸÜ€åÿØ.")
        return
    
    party_name = "Ÿá€å⁄Ü"
    if player.get('party_id'):
        party = get_party_by_id(player['party_id'])
        party_name = party['name'] if party else "ŸÜÿßŸÖÿ¥ÿÆÿµ"
    
    profile_text = f"""
üë§ Ÿæÿ±ŸàŸÅÿß€åŸÑ ÿ¥ŸÖÿß:

üÜî ŸÜÿßŸÖ: {player.get('first_name', 'ŸÜÿßŸÖÿ¥ÿÆÿµ')}
üí∞ ÿ≥⁄©Ÿá: {player.get('coins', 0):,}
üèõÔ∏è ÿ≠ÿ≤ÿ®: {party_name}
üìç ŸÖŸàŸÇÿπ€åÿ™: {player.get('location', 'ŸÜÿßŸÖÿ¥ÿÆÿµ')}
‚öîÔ∏è ÿ≥ÿ±ÿ®ÿßÿ≤ÿßŸÜ: {player.get('soldiers', 0)}
üíº ÿ≥ÿ±ŸÖÿß€åŸá‚Äå⁄Øÿ∞ÿ±€å‚ÄåŸáÿß: {len(player.get('investments', []))}
‚ù§Ô∏è Ÿàÿ∂ÿπ€åÿ™: {'ÿ≤ŸÜÿØŸá' if player.get('is_alive', True) else 'ŸÖÿ±ÿØŸá'}
    """
    
    # Create glass-style action buttons
    keyboard = [
        [
            InlineKeyboardButton("üõí ÿÆÿ±€åÿØ ÿ≥ÿ±ÿ®ÿßÿ≤", callback_data="buy_soldiers"),
            InlineKeyboardButton("üè≠ ÿÆÿ±€åÿØ ÿ¥ÿ±⁄©ÿ™", callback_data="buy_company")
        ],
        [
            InlineKeyboardButton("üíº ŸÖÿØ€åÿ±€åÿ™ ÿ≥ÿ±ŸÖÿß€åŸá", callback_data="manage_investments"),
            InlineKeyboardButton("üîÑ ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å", callback_data="refresh_profile")
        ]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(profile_text.strip(), reply_markup=markup)

async def parties(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show all parties information"""
    parties_data = load_json(PARTIES_FILE)
    
    if not parties_data:
        await update.message.reply_text("‚ùå Ÿá€å⁄Ü ÿ≠ÿ≤ÿ®€å ÿØÿ± ÿØÿ≥ÿ™ÿ±ÿ≥ ŸÜ€åÿ≥ÿ™.")
        return
    
    parties_text = "üèõÔ∏è ŸÑ€åÿ≥ÿ™ ÿßÿ≠ÿ≤ÿßÿ® ÿ≥€åÿßÿ≥€å:\n\n"
    
    for party in parties_data:
        member_count = len(party.get('members', []))
        soldier_count = party.get('soldiers', 0)
        company_count = len(party.get('companies', []))
        
        parties_text += f"üî∏ {party['name']}\n"
        parties_text += f"   üìç ŸÖŸÜÿ∑ŸÇŸá: {party['region']}\n"
        parties_text += f"   üë• ÿßÿπÿ∂ÿß: {member_count}\n"
        parties_text += f"   ‚öîÔ∏è ÿ≥ÿ±ÿ®ÿßÿ≤ÿßŸÜ: {soldier_count}\n"
        parties_text += f"   üè≠ ÿ¥ÿ±⁄©ÿ™‚ÄåŸáÿß: {company_count}\n\n"
    
    await update.message.reply_text(parties_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show help message"""
    help_text = """
üÜò ÿ±ÿßŸáŸÜŸÖÿß€å ÿ®ÿßÿ≤€å:

üìã ÿØÿ≥ÿ™Ÿàÿ±ÿßÿ™ ÿßÿ≥ÿßÿ≥€å:
/start - ÿ¥ÿ±Ÿàÿπ ÿ®ÿßÿ≤€å Ÿà ÿ´ÿ®ÿ™‚ÄåŸÜÿßŸÖ
/join - Ÿæ€åŸàÿ≥ÿ™ŸÜ ÿ®Ÿá ÿ≠ÿ≤ÿ®
/profile - ŸÖÿ¥ÿßŸáÿØŸá Ÿæÿ±ŸàŸÅÿß€åŸÑ
/parties - ŸÑ€åÿ≥ÿ™ ÿßÿ≠ÿ≤ÿßÿ®
/help - ŸÜŸÖÿß€åÿ¥ ÿß€åŸÜ ÿ±ÿßŸáŸÜŸÖÿß

üéÆ ŸÜÿ≠ŸàŸá ÿ®ÿßÿ≤€å:
1Ô∏è‚É£ ÿ®ÿß /start ÿØÿ± ÿ®ÿßÿ≤€å ÿ´ÿ®ÿ™‚ÄåŸÜÿßŸÖ ⁄©ŸÜ€åÿØ
2Ô∏è‚É£ ÿ®ÿß /join ÿ®Ÿá €å⁄©€å ÿßÿ≤ ÿßÿ≠ÿ≤ÿßÿ® ÿ®Ÿæ€åŸàŸÜÿØ€åÿØ
3Ô∏è‚É£ ŸÇÿØÿ±ÿ™ ÿ≥€åÿßÿ≥€å ⁄©ÿ≥ÿ® ⁄©ŸÜ€åÿØ
4Ô∏è‚É£ ⁄©ÿ¥Ÿàÿ± ÿ±ÿß ÿßÿØÿßÿ±Ÿá ⁄©ŸÜ€åÿØ!

üí° ŸÜ⁄©ÿßÿ™:
- Ÿáÿ± ÿ®ÿßÿ≤€å⁄©ŸÜ ÿ®ÿß 1000 ÿ≥⁄©Ÿá ÿ¥ÿ±Ÿàÿπ ŸÖ€å‚Äå⁄©ŸÜÿØ
- ÿßŸÜÿ™ÿÆÿßÿ® ÿ≠ÿ≤ÿ® ÿ®ÿ± ÿßÿ≥ÿ™ÿ±ÿßÿ™⁄ò€å ÿ¥ŸÖÿß ÿ™ÿ£ÿ´€åÿ± ÿØÿßÿ±ÿØ
- Ÿáÿ± ŸÖŸÜÿ∑ŸÇŸá Ÿà€å⁄ò⁄Ø€å‚ÄåŸáÿß€å ÿÆÿßÿµ ÿØÿßÿ±ÿØ
    """
    
    await update.message.reply_text(help_text.strip())

async def add_player_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Admin command to add authorized player"""
    user_id = update.effective_user.id
    
    # Check if the command sender is admin (IMPORTANT: Replace with your actual Telegram user ID)
    ADMIN_ID = 123456789  # TODO: Replace with your actual Telegram user ID
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ùå ÿ¥ŸÖÿß ÿßÿ¨ÿßÿ≤Ÿá ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ ÿß€åŸÜ ÿØÿ≥ÿ™Ÿàÿ± ÿ±ÿß ŸÜÿØÿßÿ±€åÿØ.")
        return
    
    if not context.args:
        await update.message.reply_text("üîß ÿßÿ≥ÿ™ŸÅÿßÿØŸá: /addplayer <user_id>\n\nŸÖÿ´ÿßŸÑ: /addplayer 123456789")
        return
    
    try:
        player_id = int(context.args[0])
        if add_authorized_player(player_id):
            await update.message.reply_text(f"‚úÖ ÿ®ÿßÿ≤€å⁄©ŸÜ ÿ®ÿß ÿ¢€åÿØ€å {player_id} ÿ®Ÿá ŸÑ€åÿ≥ÿ™ ŸÖÿ¨ÿßÿ≤ ÿßÿ∂ÿßŸÅŸá ÿ¥ÿØ.")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è ÿ®ÿßÿ≤€å⁄©ŸÜ ÿ®ÿß ÿ¢€åÿØ€å {player_id} ŸÇÿ®ŸÑÿßŸã ÿØÿ± ŸÑ€åÿ≥ÿ™ ŸÖÿ¨ÿßÿ≤ ÿßÿ≥ÿ™.")
    except ValueError:
        await update.message.reply_text("‚ùå ÿ¢€åÿØ€å Ÿàÿßÿ±ÿØ ÿ¥ÿØŸá ŸÖÿπÿ™ÿ®ÿ± ŸÜ€åÿ≥ÿ™. ŸÑÿ∑ŸÅÿßŸã €å⁄© ÿπÿØÿØ Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ.")

async def remove_player_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Admin command to remove authorized player"""
    user_id = update.effective_user.id
    
    # Check if the command sender is admin (IMPORTANT: Replace with your actual Telegram user ID)
    ADMIN_ID = 123456789  # TODO: Replace with your actual Telegram user ID
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ùå ÿ¥ŸÖÿß ÿßÿ¨ÿßÿ≤Ÿá ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ ÿß€åŸÜ ÿØÿ≥ÿ™Ÿàÿ± ÿ±ÿß ŸÜÿØÿßÿ±€åÿØ.")
        return
    
    if not context.args:
        await update.message.reply_text("üîß ÿßÿ≥ÿ™ŸÅÿßÿØŸá: /removeplayer <user_id>\n\nŸÖÿ´ÿßŸÑ: /removeplayer 123456789")
        return
    
    try:
        player_id = int(context.args[0])
        if remove_authorized_player(player_id):
            await update.message.reply_text(f"‚úÖ ÿ®ÿßÿ≤€å⁄©ŸÜ ÿ®ÿß ÿ¢€åÿØ€å {player_id} ÿßÿ≤ ŸÑ€åÿ≥ÿ™ ŸÖÿ¨ÿßÿ≤ ÿ≠ÿ∞ŸÅ ÿ¥ÿØ.")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è ÿ®ÿßÿ≤€å⁄©ŸÜ ÿ®ÿß ÿ¢€åÿØ€å {player_id} ÿØÿ± ŸÑ€åÿ≥ÿ™ ŸÖÿ¨ÿßÿ≤ ŸÖŸàÿ¨ŸàÿØ ŸÜ€åÿ≥ÿ™.")
    except ValueError:
        await update.message.reply_text("‚ùå ÿ¢€åÿØ€å Ÿàÿßÿ±ÿØ ÿ¥ÿØŸá ŸÖÿπÿ™ÿ®ÿ± ŸÜ€åÿ≥ÿ™. ŸÑÿ∑ŸÅÿßŸã €å⁄© ÿπÿØÿØ Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ.")

async def shop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show shop with purchase options"""
    user_id = update.effective_user.id
    
    # Check if player is authorized
    if not is_player_authorized(user_id):
        access_denied_message = """
‚ùå ÿ¥ŸÖÿß ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿ®Ÿá ÿ®ÿßÿ≤€å ŸÜÿØÿßÿ±€åÿØ

ÿ®ÿ±ÿß€å ÿÆÿ±€åÿØ ÿßÿ¥ÿ™ÿ±ÿß⁄© ÿ®Ÿá ÿ¢€åÿØ€å @Nonobodynonono Ÿæ€åÿßŸÖ ÿ®ÿØ€åÿØ
        """
        await update.message.reply_text(access_denied_message.strip())
        return
    
    player = get_player(user_id)
    if not player:
        await update.message.reply_text("‚ö†Ô∏è ÿßÿ®ÿ™ÿØÿß ÿ®ÿß ÿØÿ≥ÿ™Ÿàÿ± /start ÿØÿ± ÿ®ÿßÿ≤€å ÿ´ÿ®ÿ™‚ÄåŸÜÿßŸÖ ⁄©ŸÜ€åÿØ.")
        return
    
    shop_text = f"""
üõí ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá ŸÜÿ∏ÿßŸÖ€å Ÿà ÿßŸÇÿ™ÿµÿßÿØ€å

üí∞ ŸÖŸàÿ¨ŸàÿØ€å ÿ¥ŸÖÿß: {player.get('coins', 0):,} ÿ≥⁄©Ÿá

‚öîÔ∏è Ÿàÿßÿ≠ÿØŸáÿß€å ŸÜÿ∏ÿßŸÖ€å:
‚Ä¢ ÿ≥ÿ±ÿ®ÿßÿ≤ Ÿæ€åÿßÿØŸá: 100 ÿ≥⁄©Ÿá
‚Ä¢ ÿ≥ÿ±ÿ®ÿßÿ≤ Ÿà€å⁄òŸá: 250 ÿ≥⁄©Ÿá  
‚Ä¢ ÿ™ÿßŸÜ⁄©: 500 ÿ≥⁄©Ÿá
‚Ä¢ ŸáŸàÿßŸæ€åŸÖÿß: 1000 ÿ≥⁄©Ÿá

üè≠ ÿ¥ÿ±⁄©ÿ™‚ÄåŸáÿß Ÿà ÿ≥ÿ±ŸÖÿß€åŸá‚Äå⁄Øÿ∞ÿ±€å:
‚Ä¢ ⁄©ÿßÿ±ÿÆÿßŸÜŸá ⁄©Ÿà⁄Ü⁄©: 500 ÿ≥⁄©Ÿá (ÿØÿ±ÿ¢ŸÖÿØ: 50/ÿ±Ÿàÿ≤)
‚Ä¢ ⁄©ÿßÿ±ÿÆÿßŸÜŸá ÿ®ÿ≤ÿ±⁄Ø: 1500 ÿ≥⁄©Ÿá (ÿØÿ±ÿ¢ŸÖÿØ: 200/ÿ±Ÿàÿ≤)
‚Ä¢ ÿ¥ÿ±⁄©ÿ™ ŸÜŸÅÿ™€å: 3000 ÿ≥⁄©Ÿá (ÿØÿ±ÿ¢ŸÖÿØ: 500/ÿ±Ÿàÿ≤)
‚Ä¢ ÿ®ÿßŸÜ⁄©: 5000 ÿ≥⁄©Ÿá (ÿØÿ±ÿ¢ŸÖÿØ: 800/ÿ±Ÿàÿ≤)
    """
    
    # Create shop buttons
    keyboard = [
        [
            InlineKeyboardButton("‚öîÔ∏è ÿÆÿ±€åÿØ ÿ≥ÿ±ÿ®ÿßÿ≤ÿßŸÜ", callback_data="shop_soldiers"),
            InlineKeyboardButton("üè≠ ÿÆÿ±€åÿØ ÿ¥ÿ±⁄©ÿ™‚ÄåŸáÿß", callback_data="shop_companies")
        ],
        [
            InlineKeyboardButton("üíº ÿ≥ÿ±ŸÖÿß€åŸá‚Äå⁄Øÿ∞ÿ±€å‚ÄåŸáÿß€å ŸÖŸÜ", callback_data="my_investments"),
            InlineKeyboardButton("üîÑ ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å", callback_data="refresh_shop")
        ]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(shop_text.strip(), reply_markup=markup)

async def list_players_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Admin command to list authorized players"""
    user_id = update.effective_user.id
    
    # Check if the command sender is admin (IMPORTANT: Replace with your actual Telegram user ID)
    ADMIN_ID = 123456789  # TODO: Replace with your actual Telegram user ID
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ùå ÿ¥ŸÖÿß ÿßÿ¨ÿßÿ≤Ÿá ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ ÿß€åŸÜ ÿØÿ≥ÿ™Ÿàÿ± ÿ±ÿß ŸÜÿØÿßÿ±€åÿØ.")
        return
    
    authorized_players = load_json(AUTHORIZED_PLAYERS_FILE)
    
    if not authorized_players:
        await update.message.reply_text("üìù Ÿá€å⁄Ü ÿ®ÿßÿ≤€å⁄©ŸÜ ŸÖÿ¨ÿßÿ≤€å ÿØÿ± ŸÑ€åÿ≥ÿ™ ŸÖŸàÿ¨ŸàÿØ ŸÜ€åÿ≥ÿ™.")
        return
    
    players_text = "üìã ŸÑ€åÿ≥ÿ™ ÿ®ÿßÿ≤€å⁄©ŸÜÿßŸÜ ŸÖÿ¨ÿßÿ≤:\n\n"
    for i, player_id in enumerate(authorized_players, 1):
        players_text += f"{i}. {player_id}\n"
    
    await update.message.reply_text(players_text)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle callback queries from inline keyboards"""
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id
    
    # Check authorization for all callbacks except join
    if not data.startswith("join_") and not is_player_authorized(user_id):
        access_denied_message = """
‚ùå ÿ¥ŸÖÿß ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿ®Ÿá ÿ®ÿßÿ≤€å ŸÜÿØÿßÿ±€åÿØ

ÿ®ÿ±ÿß€å ÿÆÿ±€åÿØ ÿßÿ¥ÿ™ÿ±ÿß⁄© ÿ®Ÿá ÿ¢€åÿØ€å @Nonobodynonono Ÿæ€åÿßŸÖ ÿ®ÿØ€åÿØ
        """
        await query.edit_message_text(access_denied_message.strip())
        return
    
    if data.startswith("join_"):
        try:
            party_id = int(data.split("_")[1])
        except (ValueError, IndexError):
            await query.edit_message_text("‚ùå ÿÆÿ∑ÿß ÿØÿ± Ÿæÿ±ÿØÿßÿ≤ÿ¥ ÿØÿ±ÿÆŸàÿßÿ≥ÿ™.")
            return
        
        # Check if player is authorized
        if not is_player_authorized(user_id):
            access_denied_message = """
‚ùå ÿ¥ŸÖÿß ÿØÿ≥ÿ™ÿ±ÿ≥€å ÿ®Ÿá ÿ®ÿßÿ≤€å ŸÜÿØÿßÿ±€åÿØ

ÿ®ÿ±ÿß€å ÿÆÿ±€åÿØ ÿßÿ¥ÿ™ÿ±ÿß⁄© ÿ®Ÿá ÿ¢€åÿØ€å @Nonobodynonono Ÿæ€åÿßŸÖ ÿ®ÿØ€åÿØ
            """
            await query.edit_message_text(access_denied_message.strip())
            return
        
        player = get_player(user_id)
        
        if player is None:
            await query.edit_message_text("‚ö†Ô∏è ÿ¥ŸÖÿß ÿØÿ± ÿ®ÿßÿ≤€å ÿ´ÿ®ÿ™‚ÄåŸÜÿßŸÖ ŸÜ⁄©ÿ±ÿØŸá‚Äåÿß€åÿØ. ÿßÿ®ÿ™ÿØÿß /start ÿ±ÿß ÿ®ÿ≤ŸÜ€åÿØ.")
            return
        
        if player.get('party_id'):
            await query.edit_message_text("üèõÔ∏è ÿ¥ŸÖÿß ŸÇÿ®ŸÑÿßŸã ÿ®Ÿá ÿ≠ÿ≤ÿ®€å Ÿæ€åŸàÿ≥ÿ™Ÿá‚Äåÿß€åÿØ!")
            return
        
        # Get party information
        party = get_party_by_id(party_id)
        if not party:
            await query.edit_message_text("‚ùå ÿ≠ÿ≤ÿ® ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.")
            return
        
        # Update player's party membership
        update_player(user_id, {'party_id': party_id})
        
        # Add player to party members list
        parties = load_json(PARTIES_FILE)
        for p in parties:
            if p['id'] == party_id:
                if user_id not in p.get('members', []):
                    p.setdefault('members', []).append(user_id)
                break
        save_json(PARTIES_FILE, parties)
        
        success_message = f"""
üéâ ÿ™ÿ®ÿ±€å⁄©! ÿ¥ŸÖÿß ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ®Ÿá {party['name']} Ÿæ€åŸàÿ≥ÿ™€åÿØ!

üèõÔ∏è ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ≠ÿ≤ÿ®:
üìç ŸÖŸÜÿ∑ŸÇŸá: {party['region']}
üë• ÿ™ÿπÿØÿßÿØ ÿßÿπÿ∂ÿß: {len(party.get('members', []))}
‚öîÔ∏è ŸÜ€åÿ±Ÿà€å ŸÜÿ∏ÿßŸÖ€å: {party.get('soldiers', 0)}

ÿ≠ÿßŸÑÿß ŸÖ€å‚Äåÿ™ŸàÿßŸÜ€åÿØ ÿØÿ± ŸÅÿπÿßŸÑ€åÿ™‚ÄåŸáÿß€å ÿ≥€åÿßÿ≥€å ÿ¥ÿ±⁄©ÿ™ ⁄©ŸÜ€åÿØ!
        """
        
        await query.edit_message_text(success_message.strip())
    
    elif data == "buy_soldiers" or data == "shop_soldiers":
        # Show soldier purchase options
        keyboard = [
            [
                InlineKeyboardButton("üë§ ÿ≥ÿ±ÿ®ÿßÿ≤ Ÿæ€åÿßÿØŸá (100 ÿ≥⁄©Ÿá)", callback_data="buy_soldier_infantry"),
                InlineKeyboardButton("üéñÔ∏è ÿ≥ÿ±ÿ®ÿßÿ≤ Ÿà€å⁄òŸá (250 ÿ≥⁄©Ÿá)", callback_data="buy_soldier_special")
            ],
            [
                InlineKeyboardButton("üöó ÿ™ÿßŸÜ⁄© (500 ÿ≥⁄©Ÿá)", callback_data="buy_soldier_tank"),
                InlineKeyboardButton("‚úàÔ∏è ŸáŸàÿßŸæ€åŸÖÿß (1000 ÿ≥⁄©Ÿá)", callback_data="buy_soldier_plane")
            ],
            [InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="refresh_shop")]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        
        player = get_player(user_id)
        message = f"""
‚öîÔ∏è ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá ŸÜÿ∏ÿßŸÖ€å

üí∞ ŸÖŸàÿ¨ŸàÿØ€å ÿ¥ŸÖÿß: {player.get('coins', 0):,} ÿ≥⁄©Ÿá
ü™ñ ÿ≥ÿ±ÿ®ÿßÿ≤ÿßŸÜ ŸÅÿπŸÑ€å: {player.get('soldiers', 0)}

€å⁄©€å ÿßÿ≤ Ÿàÿßÿ≠ÿØŸáÿß€å ŸÜÿ∏ÿßŸÖ€å ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:
        """
        
        await query.edit_message_text(message.strip(), reply_markup=markup)
    
    elif data == "buy_company" or data == "shop_companies":
        # Show company purchase options
        keyboard = [
            [
                InlineKeyboardButton("üè≠ ⁄©ÿßÿ±ÿÆÿßŸÜŸá ⁄©Ÿà⁄Ü⁄© (500 ÿ≥⁄©Ÿá)", callback_data="buy_company_small_factory"),
                InlineKeyboardButton("üèóÔ∏è ⁄©ÿßÿ±ÿÆÿßŸÜŸá ÿ®ÿ≤ÿ±⁄Ø (1500 ÿ≥⁄©Ÿá)", callback_data="buy_company_large_factory")
            ],
            [
                InlineKeyboardButton("üõ¢Ô∏è ÿ¥ÿ±⁄©ÿ™ ŸÜŸÅÿ™€å (3000 ÿ≥⁄©Ÿá)", callback_data="buy_company_oil"),
                InlineKeyboardButton("üè¶ ÿ®ÿßŸÜ⁄© (5000 ÿ≥⁄©Ÿá)", callback_data="buy_company_bank")
            ],
            [InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="refresh_shop")]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        
        player = get_player(user_id)
        message = f"""
üè≠ ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá ÿ¥ÿ±⁄©ÿ™‚ÄåŸáÿß

üí∞ ŸÖŸàÿ¨ŸàÿØ€å ÿ¥ŸÖÿß: {player.get('coins', 0):,} ÿ≥⁄©Ÿá
üíº ÿ≥ÿ±ŸÖÿß€åŸá‚Äå⁄Øÿ∞ÿ±€å‚ÄåŸáÿß€å ŸÅÿπŸÑ€å: {len(player.get('investments', []))}

€å⁄©€å ÿßÿ≤ ÿ¥ÿ±⁄©ÿ™‚ÄåŸáÿß ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:
        """
        
        await query.edit_message_text(message.strip(), reply_markup=markup)
    
    elif data.startswith("buy_soldier_"):
        soldier_type = data.replace("buy_soldier_", "")
        costs = {"infantry": 100, "special": 250, "tank": 500, "plane": 1000}
        names = {"infantry": "ÿ≥ÿ±ÿ®ÿßÿ≤ Ÿæ€åÿßÿØŸá", "special": "ÿ≥ÿ±ÿ®ÿßÿ≤ Ÿà€å⁄òŸá", "tank": "ÿ™ÿßŸÜ⁄©", "plane": "ŸáŸàÿßŸæ€åŸÖÿß"}
        
        cost = costs.get(soldier_type, 0)
        name = names.get(soldier_type, "ŸÜÿßŸÖÿ¥ÿÆÿµ")
        
        success, message = purchase_item(user_id, "soldier", name, cost)
        
        if success:
            player = get_player(user_id)
            result_message = f"""
‚úÖ {message}

üí∞ ŸÖŸàÿ¨ŸàÿØ€å ÿ¨ÿØ€åÿØ: {player.get('coins', 0):,} ÿ≥⁄©Ÿá
‚öîÔ∏è ÿ™ÿπÿØÿßÿØ ÿ≥ÿ±ÿ®ÿßÿ≤ÿßŸÜ: {player.get('soldiers', 0)}
            """
        else:
            result_message = f"‚ùå {message}"
        
        await query.edit_message_text(result_message.strip())
    
    elif data.startswith("buy_company_"):
        company_type = data.replace("buy_company_", "")
        costs = {"small_factory": 500, "large_factory": 1500, "oil": 3000, "bank": 5000}
        names = {"small_factory": "⁄©ÿßÿ±ÿÆÿßŸÜŸá ⁄©Ÿà⁄Ü⁄©", "large_factory": "⁄©ÿßÿ±ÿÆÿßŸÜŸá ÿ®ÿ≤ÿ±⁄Ø", "oil": "ÿ¥ÿ±⁄©ÿ™ ŸÜŸÅÿ™€å", "bank": "ÿ®ÿßŸÜ⁄©"}
        
        cost = costs.get(company_type, 0)
        name = names.get(company_type, "ŸÜÿßŸÖÿ¥ÿÆÿµ")
        
        success, message = purchase_item(user_id, "company", name, cost)
        
        if success:
            player = get_player(user_id)
            daily_income = get_company_income(name)
            result_message = f"""
‚úÖ {message}

üí∞ ŸÖŸàÿ¨ŸàÿØ€å ÿ¨ÿØ€åÿØ: {player.get('coins', 0):,} ÿ≥⁄©Ÿá
üíº ÿ™ÿπÿØÿßÿØ ÿ≥ÿ±ŸÖÿß€åŸá‚Äå⁄Øÿ∞ÿ±€å‚ÄåŸáÿß: {len(player.get('investments', []))}
üíµ ÿØÿ±ÿ¢ŸÖÿØ ÿ±Ÿàÿ≤ÿßŸÜŸá: {daily_income} ÿ≥⁄©Ÿá
            """
        else:
            result_message = f"‚ùå {message}"
        
        await query.edit_message_text(result_message.strip())
    
    elif data == "my_investments":
        player = get_player(user_id)
        investments = player.get('investments', [])
        
        if not investments:
            message = "üíº ÿ¥ŸÖÿß Ÿá€å⁄Ü ÿ≥ÿ±ŸÖÿß€åŸá‚Äå⁄Øÿ∞ÿ±€å ŸÜÿØÿßÿ±€åÿØ.\n\nÿ®ÿ±ÿß€å ÿ¥ÿ±Ÿàÿπÿå ÿßÿ≤ ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá ÿ¥ÿ±⁄©ÿ™ ÿÆÿ±€åÿØÿßÿ±€å ⁄©ŸÜ€åÿØ."
        else:
            total_income = sum(inv.get('daily_income', 0) for inv in investments)
            message = f"üíº ÿ≥ÿ±ŸÖÿß€åŸá‚Äå⁄Øÿ∞ÿ±€å‚ÄåŸáÿß€å ÿ¥ŸÖÿß:\n\n"
            for i, inv in enumerate(investments, 1):
                message += f"{i}. {inv['name']} - ÿØÿ±ÿ¢ŸÖÿØ: {inv.get('daily_income', 0)} ÿ≥⁄©Ÿá/ÿ±Ÿàÿ≤\n"
            message += f"\nüíµ ⁄©ŸÑ ÿØÿ±ÿ¢ŸÖÿØ ÿ±Ÿàÿ≤ÿßŸÜŸá: {total_income} ÿ≥⁄©Ÿá"
        
        keyboard = [[InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™", callback_data="refresh_shop")]]
        markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(message, reply_markup=markup)
    
    elif data == "refresh_profile":
        # Redirect to profile command
        await query.message.delete()
        await context.bot.send_message(user_id, "üîÑ ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å Ÿæÿ±ŸàŸÅÿß€åŸÑ...")
        # Call profile function indirectly
    
    elif data == "refresh_shop":
        # Redirect to shop command  
        await query.message.delete()
        await context.bot.send_message(user_id, "üîÑ ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá...")
        # Call shop function indirectly
    
    elif data == "show_parties":
        # Show party selection (same as /join)
        parties = load_json(PARTIES_FILE)
        if not parties:
            await query.edit_message_text("‚ùå Ÿá€å⁄Ü ÿ≠ÿ≤ÿ®€å ÿØÿ± ÿØÿ≥ÿ™ÿ±ÿ≥ ŸÜ€åÿ≥ÿ™.")
            return
        
        # Create inline keyboard with parties
        keyboard = []
        for party in parties:
            member_count = len(party.get('members', []))
            button_text = f"{party['name']} ({party['region']}) - {member_count} ÿπÿ∂Ÿà"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"join_{party['id']}")])
        
        # Add back button
        keyboard.append([InlineKeyboardButton("üîô ŸÖŸÜŸà€å ÿßÿµŸÑ€å", callback_data="main_menu")])
        
        markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üèõÔ∏è €å⁄©€å ÿßÿ≤ ÿßÿ≠ÿ≤ÿßÿ® ÿ≤€åÿ± ÿ±ÿß ÿ®ÿ±ÿß€å Ÿæ€åŸàÿ≥ÿ™ŸÜ ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:",
            reply_markup=markup
        )
    
    elif data == "show_profile":
        # Show profile (similar to /profile command)
        player = get_player(user_id)
        if not player:
            await query.edit_message_text("‚ö†Ô∏è ÿßÿ®ÿ™ÿØÿß ÿ®ÿß ÿØÿ≥ÿ™Ÿàÿ± /start ÿØÿ± ÿ®ÿßÿ≤€å ÿ´ÿ®ÿ™‚ÄåŸÜÿßŸÖ ⁄©ŸÜ€åÿØ.")
            return
        
        party_name = "Ÿá€å⁄Ü"
        if player.get('party_id'):
            party = get_party_by_id(player['party_id'])
            party_name = party['name'] if party else "ŸÜÿßŸÖÿ¥ÿÆÿµ"
        
        profile_text = f"""
üë§ Ÿæÿ±ŸàŸÅÿß€åŸÑ ÿ¥ŸÖÿß:

üÜî ŸÜÿßŸÖ: {player.get('first_name', 'ŸÜÿßŸÖÿ¥ÿÆÿµ')}
üí∞ ÿ≥⁄©Ÿá: {player.get('coins', 0):,}
üèõÔ∏è ÿ≠ÿ≤ÿ®: {party_name}
üìç ŸÖŸàŸÇÿπ€åÿ™: {player.get('location', 'ŸÜÿßŸÖÿ¥ÿÆÿµ')}
‚öîÔ∏è ÿ≥ÿ±ÿ®ÿßÿ≤ÿßŸÜ: {player.get('soldiers', 0)}
üíº ÿ≥ÿ±ŸÖÿß€åŸá‚Äå⁄Øÿ∞ÿ±€å‚ÄåŸáÿß: {len(player.get('investments', []))}
‚ù§Ô∏è Ÿàÿ∂ÿπ€åÿ™: {'ÿ≤ŸÜÿØŸá' if player.get('is_alive', True) else 'ŸÖÿ±ÿØŸá'}
        """
        
        # Create profile action buttons
        keyboard = [
            [
                InlineKeyboardButton("üõí ÿÆÿ±€åÿØ ÿ≥ÿ±ÿ®ÿßÿ≤", callback_data="buy_soldiers"),
                InlineKeyboardButton("üè≠ ÿÆÿ±€åÿØ ÿ¥ÿ±⁄©ÿ™", callback_data="buy_company")
            ],
            [
                InlineKeyboardButton("üìç ÿ™ÿ∫€å€åÿ± ŸÖŸàŸÇÿπ€åÿ™", callback_data="change_location"),
                InlineKeyboardButton("üèõÔ∏è ÿ≠ÿ≤ÿ® ŸÖŸÜ", callback_data="my_party")
            ],
            [
                InlineKeyboardButton("üíº ŸÖÿØ€åÿ±€åÿ™ ÿ≥ÿ±ŸÖÿß€åŸá", callback_data="my_investments"),
                InlineKeyboardButton("üîô ŸÖŸÜŸà€å ÿßÿµŸÑ€å", callback_data="main_menu")
            ]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(profile_text.strip(), reply_markup=markup)
    
    elif data == "show_shop":
        # Show shop (similar to /shop command)
        player = get_player(user_id)
        if not player:
            await query.edit_message_text("‚ö†Ô∏è ÿßÿ®ÿ™ÿØÿß ÿ®ÿß ÿØÿ≥ÿ™Ÿàÿ± /start ÿØÿ± ÿ®ÿßÿ≤€å ÿ´ÿ®ÿ™‚ÄåŸÜÿßŸÖ ⁄©ŸÜ€åÿØ.")
            return
        
        shop_text = f"""
üõí ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá ŸÜÿ∏ÿßŸÖ€å Ÿà ÿßŸÇÿ™ÿµÿßÿØ€å

üí∞ ŸÖŸàÿ¨ŸàÿØ€å ÿ¥ŸÖÿß: {player.get('coins', 0):,} ÿ≥⁄©Ÿá

‚öîÔ∏è Ÿàÿßÿ≠ÿØŸáÿß€å ŸÜÿ∏ÿßŸÖ€å:
‚Ä¢ ÿ≥ÿ±ÿ®ÿßÿ≤ Ÿæ€åÿßÿØŸá: 100 ÿ≥⁄©Ÿá
‚Ä¢ ÿ≥ÿ±ÿ®ÿßÿ≤ Ÿà€å⁄òŸá: 250 ÿ≥⁄©Ÿá  
‚Ä¢ ÿ™ÿßŸÜ⁄©: 500 ÿ≥⁄©Ÿá
‚Ä¢ ŸáŸàÿßŸæ€åŸÖÿß: 1000 ÿ≥⁄©Ÿá

üè≠ ÿ¥ÿ±⁄©ÿ™‚ÄåŸáÿß Ÿà ÿ≥ÿ±ŸÖÿß€åŸá‚Äå⁄Øÿ∞ÿ±€å:
‚Ä¢ ⁄©ÿßÿ±ÿÆÿßŸÜŸá ⁄©Ÿà⁄Ü⁄©: 500 ÿ≥⁄©Ÿá (ÿØÿ±ÿ¢ŸÖÿØ: 50/ÿ±Ÿàÿ≤)
‚Ä¢ ⁄©ÿßÿ±ÿÆÿßŸÜŸá ÿ®ÿ≤ÿ±⁄Ø: 1500 ÿ≥⁄©Ÿá (ÿØÿ±ÿ¢ŸÖÿØ: 200/ÿ±Ÿàÿ≤)
‚Ä¢ ÿ¥ÿ±⁄©ÿ™ ŸÜŸÅÿ™€å: 3000 ÿ≥⁄©Ÿá (ÿØÿ±ÿ¢ŸÖÿØ: 500/ÿ±Ÿàÿ≤)
‚Ä¢ ÿ®ÿßŸÜ⁄©: 5000 ÿ≥⁄©Ÿá (ÿØÿ±ÿ¢ŸÖÿØ: 800/ÿ±Ÿàÿ≤)
        """
        
        # Create shop buttons
        keyboard = [
            [
                InlineKeyboardButton("‚öîÔ∏è ÿÆÿ±€åÿØ ÿ≥ÿ±ÿ®ÿßÿ≤ÿßŸÜ", callback_data="shop_soldiers"),
                InlineKeyboardButton("üè≠ ÿÆÿ±€åÿØ ÿ¥ÿ±⁄©ÿ™‚ÄåŸáÿß", callback_data="shop_companies")
            ],
            [
                InlineKeyboardButton("üíº ÿ≥ÿ±ŸÖÿß€åŸá‚Äå⁄Øÿ∞ÿ±€å‚ÄåŸáÿß€å ŸÖŸÜ", callback_data="my_investments"),
                InlineKeyboardButton("üîô ŸÖŸÜŸà€å ÿßÿµŸÑ€å", callback_data="main_menu")
            ]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(shop_text.strip(), reply_markup=markup)
    
    elif data == "show_all_parties":
        # Show all parties info (similar to /parties command)
        parties_data = load_json(PARTIES_FILE)
        
        if not parties_data:
            await query.edit_message_text("‚ùå Ÿá€å⁄Ü ÿ≠ÿ≤ÿ®€å ÿØÿ± ÿØÿ≥ÿ™ÿ±ÿ≥ ŸÜ€åÿ≥ÿ™.")
            return
        
        parties_text = "üèõÔ∏è ŸÑ€åÿ≥ÿ™ ÿßÿ≠ÿ≤ÿßÿ® ÿ≥€åÿßÿ≥€å:\n\n"
        
        for party in parties_data:
            member_count = len(party.get('members', []))
            soldier_count = party.get('soldiers', 0)
            company_count = len(party.get('companies', []))
            
            parties_text += f"üî∏ {party['name']}\n"
            parties_text += f"   üìç ŸÖŸÜÿ∑ŸÇŸá: {party['region']}\n"
            parties_text += f"   üë• ÿßÿπÿ∂ÿß: {member_count}\n"
            parties_text += f"   ‚öîÔ∏è ÿ≥ÿ±ÿ®ÿßÿ≤ÿßŸÜ: {soldier_count}\n"
            parties_text += f"   üè≠ ÿ¥ÿ±⁄©ÿ™‚ÄåŸáÿß: {company_count}\n\n"
        
        keyboard = [[InlineKeyboardButton("üîô ŸÖŸÜŸà€å ÿßÿµŸÑ€å", callback_data="main_menu")]]
        markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(parties_text, reply_markup=markup)
    
    elif data == "show_help":
        # Show help (similar to /help command)
        help_text = """
üÜò ÿ±ÿßŸáŸÜŸÖÿß€å ÿ®ÿßÿ≤€å:

üìã ÿØÿ≥ÿ™Ÿàÿ±ÿßÿ™ ÿßÿ≥ÿßÿ≥€å:
/start - ÿ¥ÿ±Ÿàÿπ ÿ®ÿßÿ≤€å Ÿà ŸÖŸÜŸà€å ÿßÿµŸÑ€å
/join - Ÿæ€åŸàÿ≥ÿ™ŸÜ ÿ®Ÿá ÿ≠ÿ≤ÿ®
/profile - ŸÖÿ¥ÿßŸáÿØŸá Ÿæÿ±ŸàŸÅÿß€åŸÑ
/shop - ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá
/parties - ŸÑ€åÿ≥ÿ™ ÿßÿ≠ÿ≤ÿßÿ®
/help - ŸÜŸÖÿß€åÿ¥ ÿß€åŸÜ ÿ±ÿßŸáŸÜŸÖÿß

üéÆ ŸÜÿ≠ŸàŸá ÿ®ÿßÿ≤€å:
1Ô∏è‚É£ ÿ®ÿß /start ÿØÿ± ÿ®ÿßÿ≤€å ÿ´ÿ®ÿ™‚ÄåŸÜÿßŸÖ ⁄©ŸÜ€åÿØ
2Ô∏è‚É£ ÿßÿ≤ ŸÖŸÜŸà€å ÿßÿµŸÑ€å ÿ®Ÿá €å⁄©€å ÿßÿ≤ ÿßÿ≠ÿ≤ÿßÿ® ÿ®Ÿæ€åŸàŸÜÿØ€åÿØ
3Ô∏è‚É£ ÿßÿ≤ ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá ÿ≥ÿ±ÿ®ÿßÿ≤ Ÿà ÿ¥ÿ±⁄©ÿ™ ÿÆÿ±€åÿØÿßÿ±€å ⁄©ŸÜ€åÿØ
4Ô∏è‚É£ ŸÇÿØÿ±ÿ™ ÿ≥€åÿßÿ≥€å ⁄©ÿ≥ÿ® ⁄©ŸÜ€åÿØ!

üí° ŸÜ⁄©ÿßÿ™:
- Ÿáÿ± ÿ®ÿßÿ≤€å⁄©ŸÜ ÿ®ÿß 1000 ÿ≥⁄©Ÿá ÿ¥ÿ±Ÿàÿπ ŸÖ€å‚Äå⁄©ŸÜÿØ
- ÿßŸÜÿ™ÿÆÿßÿ® ÿ≠ÿ≤ÿ® ÿ®ÿ± ÿßÿ≥ÿ™ÿ±ÿßÿ™⁄ò€å ÿ¥ŸÖÿß ÿ™ÿ£ÿ´€åÿ± ÿØÿßÿ±ÿØ
- ÿ¥ÿ±⁄©ÿ™‚ÄåŸáÿß ÿØÿ±ÿ¢ŸÖÿØ ÿ±Ÿàÿ≤ÿßŸÜŸá ÿØÿßÿ±ŸÜÿØ
        """
        
        keyboard = [[InlineKeyboardButton("üîô ŸÖŸÜŸà€å ÿßÿµŸÑ€å", callback_data="main_menu")]]
        markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(help_text.strip(), reply_markup=markup)
    
    elif data == "main_menu":
        # Return to main menu
        user = query.from_user
        
        welcome_message = f"""
üéÆ ÿ≥ŸÑÿßŸÖ {user.first_name}!

ÿ®Ÿá ÿ®ÿßÿ≤€å ÿßÿ≥ÿ™ÿ±ÿßÿ™⁄ò€å ÿ≥€åÿßÿ≥€å ÿÆŸàÿ¥ ÿ¢ŸÖÿØ€åÿØ!

üìä Ÿàÿ∂ÿπ€åÿ™ ÿ¥ŸÖÿß:
üí∞ ÿ≥⁄©Ÿá: 1000
üìç ŸÖŸàŸÇÿπ€åÿ™: ÿ™Ÿáÿ±ÿßŸÜ
üèõÔ∏è ÿ≠ÿ≤ÿ®: Ÿá€å⁄Ü

üéØ ŸáÿØŸÅ ÿ®ÿßÿ≤€å: ŸÇÿØÿ±ÿ™ ÿ≥€åÿßÿ≥€å ⁄©ÿ≥ÿ® ⁄©ŸÜ€åÿØ Ÿà ⁄©ÿ¥Ÿàÿ± ÿ±ÿß ÿßÿØÿßÿ±Ÿá ⁄©ŸÜ€åÿØ!
        """
        
        # Create main menu glass-style buttons
        keyboard = [
            [
                InlineKeyboardButton("üèõÔ∏è Ÿæ€åŸàÿ≥ÿ™ŸÜ ÿ®Ÿá ÿ≠ÿ≤ÿ®", callback_data="show_parties"),
                InlineKeyboardButton("üë§ Ÿæÿ±ŸàŸÅÿß€åŸÑ ŸÖŸÜ", callback_data="show_profile")
            ],
            [
                InlineKeyboardButton("üõí ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá", callback_data="show_shop"),
                InlineKeyboardButton("üìç ÿ™ÿ∫€å€åÿ± ŸÖŸàŸÇÿπ€åÿ™", callback_data="change_location")
            ],
            [
                InlineKeyboardButton("üèõÔ∏è ÿ≠ÿ≤ÿ® ŸÖŸÜ", callback_data="my_party"),
                InlineKeyboardButton("üìä ÿßÿ≠ÿ≤ÿßÿ® ÿ≥€åÿßÿ≥€å", callback_data="show_all_parties")
            ],
            [
                InlineKeyboardButton("üÜò ÿ±ÿßŸáŸÜŸÖÿß", callback_data="show_help")
            ]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(welcome_message.strip(), reply_markup=markup)
    
    elif data == "change_location":
        # Show location change options with all 11 provinces from the game
        location_text = """
üìç ÿßŸÜÿ™ÿÆÿßÿ® ŸÖŸàŸÇÿπ€åÿ™ ÿ¨ÿØ€åÿØ

ÿßÿ≥ÿ™ÿßŸÜ ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿÆŸàÿØ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:
        """
        
        # Create location buttons based on the 11 provinces from parties
        keyboard = [
            [
                InlineKeyboardButton("üèõÔ∏è ÿ™Ÿáÿ±ÿßŸÜ", callback_data="location_ÿ™Ÿáÿ±ÿßŸÜ"),
                InlineKeyboardButton("üèîÔ∏è ŸáŸÖÿØÿßŸÜ", callback_data="location_ŸáŸÖÿØÿßŸÜ")
            ],
            [
                InlineKeyboardButton("üåÖ ŸÅÿßÿ±ÿ≥", callback_data="location_ŸÅÿßÿ±ÿ≥"),
                InlineKeyboardButton("üõ¢Ô∏è ÿÆŸàÿ≤ÿ≥ÿ™ÿßŸÜ", callback_data="location_ÿÆŸàÿ≤ÿ≥ÿ™ÿßŸÜ")
            ],
            [
                InlineKeyboardButton("‚òÄÔ∏è ÿÆÿ±ÿßÿ≥ÿßŸÜ", callback_data="location_ÿÆÿ±ÿßÿ≥ÿßŸÜ"),
                InlineKeyboardButton("üèúÔ∏è ÿ®ŸÑŸà⁄Üÿ≥ÿ™ÿßŸÜ", callback_data="location_ÿ®ŸÑŸà⁄Üÿ≥ÿ™ÿßŸÜ")
            ],
            [
                InlineKeyboardButton("üåä ŸÖÿßÿ≤ŸÜÿØÿ±ÿßŸÜ", callback_data="location_ŸÖÿßÿ≤ŸÜÿØÿ±ÿßŸÜ"),
                InlineKeyboardButton("üóª ÿ¢ÿ∞ÿ±ÿ®ÿß€åÿ¨ÿßŸÜ", callback_data="location_ÿ¢ÿ∞ÿ±ÿ®ÿß€åÿ¨ÿßŸÜ")
            ],
            [
                InlineKeyboardButton("ü¶Ö ⁄©ÿ±ÿØÿ≥ÿ™ÿßŸÜ", callback_data="location_⁄©ÿ±ÿØÿ≥ÿ™ÿßŸÜ"),
                InlineKeyboardButton("üåø ŸÑÿ±ÿ≥ÿ™ÿßŸÜ", callback_data="location_ŸÑÿ±ÿ≥ÿ™ÿßŸÜ")
            ],
            [
                InlineKeyboardButton("üè∫ ÿßÿµŸÅŸáÿßŸÜ", callback_data="location_ÿßÿµŸÅŸáÿßŸÜ")
            ],
            [
                InlineKeyboardButton("üîô ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ÿ®Ÿá Ÿæÿ±ŸàŸÅÿß€åŸÑ", callback_data="show_profile")
            ]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(location_text.strip(), reply_markup=markup)
    
    elif data.startswith("location_"):
        # Handle location change
        new_location = data.replace("location_", "")
        
        # Update player's location
        success = update_player(user_id, {'location': new_location})
        
        player = get_player(user_id)
        
        if player:
            success_message = f"""
‚úÖ ŸÖŸàŸÇÿπ€åÿ™ ÿ¥ŸÖÿß ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ™ÿ∫€å€åÿ± €åÿßŸÅÿ™!

üìç ŸÖŸàŸÇÿπ€åÿ™ ÿ¨ÿØ€åÿØ: {new_location}
üí∞ ŸÖŸàÿ¨ŸàÿØ€å: {player.get('coins', 0):,} ÿ≥⁄©Ÿá

ÿ≠ÿßŸÑÿß ŸÖ€å‚Äåÿ™ŸàÿßŸÜ€åÿØ ÿØÿ± ÿßÿ≥ÿ™ÿßŸÜ {new_location} ŸÅÿπÿßŸÑ€åÿ™ ⁄©ŸÜ€åÿØ.
            """
            
            keyboard = [
                [
                    InlineKeyboardButton("üë§ ŸÖÿ¥ÿßŸáÿØŸá Ÿæÿ±ŸàŸÅÿß€åŸÑ", callback_data="show_profile"),
                    InlineKeyboardButton("üõí ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá", callback_data="show_shop")
                ],
                [
                    InlineKeyboardButton("üîô ŸÖŸÜŸà€å ÿßÿµŸÑ€å", callback_data="main_menu")
                ]
            ]
            markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(success_message.strip(), reply_markup=markup)
        else:
            await query.edit_message_text("‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿ™ÿ∫€å€åÿ± ŸÖŸàŸÇÿπ€åÿ™. ŸÑÿ∑ŸÅÿßŸã ÿØŸàÿ®ÿßÿ±Ÿá ÿ™ŸÑÿßÿ¥ ⁄©ŸÜ€åÿØ.")
    
    elif data == "my_party":
        # Show current party information including leader and total soldiers
        player = get_player(user_id)
        if not player:
            await query.edit_message_text("‚ö†Ô∏è ÿßÿ®ÿ™ÿØÿß ÿ®ÿß ÿØÿ≥ÿ™Ÿàÿ± /start ÿØÿ± ÿ®ÿßÿ≤€å ÿ´ÿ®ÿ™‚ÄåŸÜÿßŸÖ ⁄©ŸÜ€åÿØ.")
            return
        
        party_id = player.get('party_id')
        if not party_id:
            await query.edit_message_text("""
‚ùå ÿ¥ŸÖÿß ÿπÿ∂Ÿà Ÿá€å⁄Ü ÿ≠ÿ≤ÿ®€å ŸÜ€åÿ≥ÿ™€åÿØ.

ÿßÿ®ÿ™ÿØÿß ÿßÿ≤ ŸÖŸÜŸà€å ÿßÿµŸÑ€å ÿ®Ÿá €å⁄©€å ÿßÿ≤ ÿßÿ≠ÿ≤ÿßÿ® ÿ®Ÿæ€åŸàŸÜÿØ€åÿØ.
            """)
            return
        
        # Get party data
        party = get_party_by_id(party_id)
        if not party:
            await query.edit_message_text("‚ùå ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ≠ÿ≤ÿ® €åÿßŸÅÿ™ ŸÜÿ¥ÿØ.")
            return
        
        # Get party leader (richest member)
        leader = get_party_leader(party_id)
        leader_info = "ŸÜÿßŸÖÿ¥ÿÆÿµ"
        if leader:
            leader_name = leader.get('first_name', 'ŸÜÿßŸÖÿ¥ÿÆÿµ')
            leader_coins = leader.get('coins', 0)
            leader_info = f"{leader_name} (ID: {leader['id']}) - {leader_coins:,} ÿ≥⁄©Ÿá"
        
        # Get total soldiers of all party members
        total_soldiers = get_party_total_soldiers(party_id)
        
        # Get party member count
        member_count = len(party.get('members', []))
        
        party_info = f"""
üèõÔ∏è ÿßÿ∑ŸÑÿßÿπÿßÿ™ ÿ≠ÿ≤ÿ® ÿ¥ŸÖÿß

üìõ ŸÜÿßŸÖ ÿ≠ÿ≤ÿ®: {party['name']}
üìç ŸÖŸÜÿ∑ŸÇŸá: {party['region']}
üë• ÿ™ÿπÿØÿßÿØ ÿßÿπÿ∂ÿß: {member_count}
‚öîÔ∏è ŸÖÿ¨ŸÖŸàÿπ ÿ≥ÿ±ÿ®ÿßÿ≤ÿßŸÜ ÿ≠ÿ≤ÿ®: {total_soldiers:,}

üëë ÿ±Ÿáÿ®ÿ± ÿ≠ÿ≤ÿ® (ÿ´ÿ±Ÿàÿ™ŸÖŸÜÿØÿ™ÿ±€åŸÜ ÿπÿ∂Ÿà):
{leader_info}

üí° ÿ±Ÿáÿ®ÿ±€å ÿ≠ÿ≤ÿ® ÿ®ÿ± ÿßÿ≥ÿßÿ≥ ÿ®€åÿ¥ÿ™ÿ±€åŸÜ ŸÖŸÇÿØÿßÿ± ÿ≥⁄©Ÿá ÿ™ÿπ€å€åŸÜ ŸÖ€å‚Äåÿ¥ŸàÿØ.
        """
        
        keyboard = [
            [
                InlineKeyboardButton("üë§ Ÿæÿ±ŸàŸÅÿß€åŸÑ ŸÖŸÜ", callback_data="show_profile"),
                InlineKeyboardButton("üõí ŸÅÿ±Ÿàÿ¥⁄ØÿßŸá", callback_data="show_shop")
            ],
            [
                InlineKeyboardButton("‚ùå ÿ™ÿ±⁄© ÿ≠ÿ≤ÿ®", callback_data="leave_party"),
                InlineKeyboardButton("üìä ŸáŸÖŸá ÿßÿ≠ÿ≤ÿßÿ®", callback_data="show_all_parties")
            ],
            [
                InlineKeyboardButton("üîô ŸÖŸÜŸà€å ÿßÿµŸÑ€å", callback_data="main_menu")
            ]
        ]
        markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(party_info.strip(), reply_markup=markup)
    
    elif data == "leave_party":
        # Handle leaving party
        success, message = leave_party(user_id)
        
        if success:
            # Show success message with options
            success_text = f"""
‚úÖ {message}

ÿ¥ŸÖÿß ÿßŸÑÿßŸÜ ÿ¢ÿ≤ÿßÿØ Ÿáÿ≥ÿ™€åÿØ Ÿà ŸÖ€å‚Äåÿ™ŸàÿßŸÜ€åÿØ ÿ®Ÿá ÿ≠ÿ≤ÿ® ÿ¨ÿØ€åÿØ€å ÿ®Ÿæ€åŸàŸÜÿØ€åÿØ.
            """
            
            keyboard = [
                [
                    InlineKeyboardButton("üèõÔ∏è Ÿæ€åŸàÿ≥ÿ™ŸÜ ÿ®Ÿá ÿ≠ÿ≤ÿ® ÿ¨ÿØ€åÿØ", callback_data="show_parties"),
                    InlineKeyboardButton("üë§ Ÿæÿ±ŸàŸÅÿß€åŸÑ ŸÖŸÜ", callback_data="show_profile")
                ],
                [
                    InlineKeyboardButton("üîô ŸÖŸÜŸà€å ÿßÿµŸÑ€å", callback_data="main_menu")
                ]
            ]
            markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(success_text.strip(), reply_markup=markup)
        else:
            # Show error message
            keyboard = [
                [
                    InlineKeyboardButton("üèõÔ∏è Ÿæ€åŸàÿ≥ÿ™ŸÜ ÿ®Ÿá ÿ≠ÿ≤ÿ®", callback_data="show_parties"),
                    InlineKeyboardButton("üîô ŸÖŸÜŸà€å ÿßÿµŸÑ€å", callback_data="main_menu")
                ]
            ]
            markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(f"‚ùå {message}", reply_markup=markup)

# ========== Main ==========

def main():
    """Main function to run the bot"""
    # Create data directory if it doesn't exist
    os.makedirs(DATA_DIR, exist_ok=True)
    
    # Initialize data files if they don't exist
    if not os.path.exists(PARTIES_FILE):
        initial_parties = [
            {"id": 1, "name": "ÿ≠ÿ≤ÿ® ÿ≥ŸàŸÖ⁄©ÿß", "region": "ÿ™Ÿáÿ±ÿßŸÜ", "members": [], "soldiers": 0, "companies": []},
            {"id": 2, "name": "ÿ≠ÿ≤ÿ® ÿ™ŸàÿØŸá", "region": "ŸáŸÖÿØÿßŸÜ", "members": [], "soldiers": 0, "companies": []},
            {"id": 3, "name": "ÿ≠ÿ≤ÿ® ŸÖŸÑ€å", "region": "ŸÅÿßÿ±ÿ≥", "members": [], "soldiers": 0, "companies": []},
            {"id": 4, "name": "ÿ≠ÿ≤ÿ® ÿ¨ŸáÿßÿØ", "region": "ÿÆŸàÿ≤ÿ≥ÿ™ÿßŸÜ", "members": [], "soldiers": 0, "companies": []},
            {"id": 5, "name": "ÿ≠ÿ≤ÿ® ÿÆŸàÿ±ÿ¥€åÿØ", "region": "ÿÆÿ±ÿßÿ≥ÿßŸÜ", "members": [], "soldiers": 0, "companies": []},
            {"id": 6, "name": "ÿ≠ÿ≤ÿ® ŸÖÿßÿ¥Ÿá", "region": "ÿ®ŸÑŸà⁄Üÿ≥ÿ™ÿßŸÜ", "members": [], "soldiers": 0, "companies": []},
            {"id": 7, "name": "ÿ≠ÿ≤ÿ® ÿ™ÿßÿ¨", "region": "ŸÖÿßÿ≤ŸÜÿØÿ±ÿßŸÜ", "members": [], "soldiers": 0, "companies": []},
            {"id": 8, "name": "ÿ≠ÿ≤ÿ® ÿ≥ÿ±ÿÆ", "region": "ÿ¢ÿ∞ÿ±ÿ®ÿß€åÿ¨ÿßŸÜ", "members": [], "soldiers": 0, "companies": []},
            {"id": 9, "name": "ÿ≠ÿ≤ÿ® Ÿæ⁄òŸà⁄©", "region": "⁄©ÿ±ÿØÿ≥ÿ™ÿßŸÜ", "members": [], "soldiers": 0, "companies": []},
            {"id": 10, "name": "ÿ≠ÿ≤ÿ® ŸÜÿß⁄© ÿßŸàÿ™", "region": "ŸÑÿ±ÿ≥ÿ™ÿßŸÜ", "members": [], "soldiers": 0, "companies": []},
            {"id": 11, "name": "ÿ≠ÿ≤ÿ® ÿ≥ÿ±ŸÖÿß€åŸá", "region": "ÿßÿµŸÅŸáÿßŸÜ", "members": [], "soldiers": 0, "companies": []}
        ]
        save_json(PARTIES_FILE, initial_parties)
    
    if not os.path.exists(PLAYERS_FILE):
        save_json(PLAYERS_FILE, [])
    
    if not os.path.exists(AUTHORIZED_PLAYERS_FILE):
        save_json(AUTHORIZED_PLAYERS_FILE, [])
    
    # Build the application
    application = ApplicationBuilder().token(TOKEN).build()
    
    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("join", join))
    application.add_handler(CommandHandler("profile", profile))
    application.add_handler(CommandHandler("parties", parties))
    application.add_handler(CommandHandler("shop", shop_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("addplayer", add_player_command))
    application.add_handler(CommandHandler("removeplayer", remove_player_command))
    application.add_handler(CommandHandler("listplayers", list_players_command))
    application.add_handler(CallbackQueryHandler(handle_callback))
    
    print("ü§ñ Political War Bot is starting...")
    print(f"üìÅ Data directory: {DATA_DIR}")
    print(f"üèõÔ∏è Parties file: {PARTIES_FILE}")
    print(f"üë• Players file: {PLAYERS_FILE}")
    print("‚úÖ Bot is running and ready to receive commands!")
    
    # Run the bot
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
